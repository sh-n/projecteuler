#!/usr/bin/env python
# coding=utf-8


"""
Problem Definition :

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""

__author__ = 'vivek'

import time

startTime = time.clock()


def triangle(num):
    return num*(num+1)/2


def square(num):
    return num*num


def pentagonal(num):
    return num*(3*num - 1)/2


def hexagonal(num):
    return num*(2*num - 1)


def heptagonal(num):
    return num*(5*num - 3)/2


def octagonal(num):
    return num*(3*num - 2)

tri = []
squa = []
penta = []
hexa = []
hepta = []
octa = []

hepta_octa = []
hexa_rest = []
penta_rest = []
squa_rest =[]
tri_rest =[]


answer = 0
number = 1
while answer < 10000 :
    answer = triangle(number)
    if answer > 999:
        tri.append(answer)
    number += 1


answer = 0
number = 1
while answer < 10000 :
    answer = square(number)
    if answer > 999:
        squa.append(answer)
    number += 1

answer = 0
number = 1
while answer < 10000 :
    answer = pentagonal(number)
    if answer > 999 and answer < 10000:
        penta.append(answer)
    number += 1

answer = 0
number = 1
while answer < 10000 :
    answer = hexagonal(number)
    if answer > 999 and answer < 10000:
        hexa.append(answer)
    number += 1


answer = 0
number = 1
while answer < 10000 :
    answer = heptagonal(number)
    if answer > 999 and answer < 10000:
        hepta.append(answer)
    number += 1


answer = 0
number = 1
while answer < 10000:
    answer = octagonal(number)
    if answer > 999 and answer < 10000:
        octa.append(answer)
    number += 1

print(hexa)
print(len(hexa))

print(hepta)
print(len(hepta))

print(octa)
print(len(octa))

for num1 in hepta:
    for num2 in octa:
        if str(num1)[-2:] == str(num2)[:2]:
            hepta_octa.append((num1,num2))

for num1 in hexa:
    for num2 in hepta_octa:
        if str(num1)[-2:] == str(num2[0])[:2]:
            hexa_rest.append((num1,num2[0],num2[1]))

for num1 in penta:
    for num2 in hexa_rest:
        if str(num1)[-2:] == str(num2[0])[:2]:
            penta_rest.append((num1,num2[0],num2[1],num2[2]))

for num1 in squa:
    for num2 in penta_rest:
        if str(num1)[-2:] == str(num2[0])[:2]:
            squa_rest.append((num1,num2[0],num2[1],num2[2],num2[3]))

for num1 in tri:
    for num2 in squa_rest:
        if str(num1)[-2:] == str(num2[0])[:2]:
            tri_rest.append((num1,num2[0],num2[1],num2[2],num2[3],num2[4]))

print(hepta_octa)
print(len(hepta_octa))

print(hexa_rest)
print(len(hexa_rest))

print(penta_rest)
print(len(penta_rest))

print(squa_rest)
print(len(squa_rest))

print(tri_rest)
print(len(tri_rest))

print "Run time...{} secs \n".format(round(time.clock() - startTime, 4))
